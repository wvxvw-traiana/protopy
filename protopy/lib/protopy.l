%{
#include <string.h>
#include <stdio.h>
#include <stddef.h>
#include "list.h"
#include "helpers.h"
#include "protopy.tab.h"

#define YY_DECL  int yylex          \
            (YYSTYPE* yylval_param, \
             YYLTYPE* yylloc_param, \
             void* yyscanner,       \
             apr_pool_t* mp)

#define YY_USER_ACTION                          \
    yylloc->first_line = yylloc->last_line;     \
    yylloc->first_column = yylloc->last_column; \
    for (int i = 0; yytext[i] != '\0'; i++) {   \
        if (yytext[i] == '\n') {                \
            yylloc->last_line++;                \
            yylloc->last_column = 0;            \
        }                                       \
        else {                                  \
            yylloc->last_column++;              \
        }                                       \
    }
%}

%option yylineno
%option bison-bridge
%option bison-locations
%option reentrant
%option noinput
%option nounput

%%

\"(\\([\\abfnrtv]|x[0-9a-fA-F][0-9a-fA-F]|[0-7][0-7][0-7])|[^"\\])*\" {
   yylval->string = dupstr(yytext, mp);
   return STRING_LITERAL;
}
'(\\([\\abfnrtv]|x[0-9a-fA-F][0-9a-fA-F]|[0-7][0-7][0-7])|[^'\\])*' {
   yylval->string = dupstr(yytext, mp);
   return STRING_LITERAL;
}

([1-9][0-9]*|0) {
  yylval->string = dupstr(yytext, mp);
  return POSINTEGER;
}
([-][1-9][0-9]*|0) {
  yylval->string = dupstr(yytext, mp);
  return NEGINTEGER;
}

true  { return BOOL_TRUE; }
false { return BOOL_FALSE; }

bool       { return TBOOL; }
enum       { return ENUM; }
extensions { return EXTENSIONS; }
extend     { return EXTEND; }
fixed32    { return FIXED32; }
fixed64    { return FIXED64; }
import     { return IMPORT; }
int32      { return TINT32; }
int64      { return TINT64; }
max        { return MAX; }
message    { return MESSAGE; }
map        { return MAP; }
oneof      { return ONEOF; }
option     { return OPTION; }
optional   { return TOPTIONAL; }
package    { return PACKAGE; }
public     { return PUBLIC; }
required   { return REQUIRED; }
repeated   { return REPEATED; }
reserved   { return RESERVED; }
returns    { return RETURNS; }
rpc        { return RPC; }
service    { return SERVICE; }
sfixed32   { return SFIXED32; }
sfixed64   { return SFIXED64; }
sint32     { return SINT32; }
sint64     { return SINT64; }
string     { return STRING; }
stream     { return STREAM; }
syntax     { return SYNTAX; }
to         { return TO; }
uint32     { return TUINT32; }
uint64     { return TUINT64; }
weak       { return WEAK; }

[a-zA-Z_][a-zA-Z0-9_]* {
    yylval->string = dupstr(yytext, mp);
    return IDENTIFIER;
}

[(){}=\[\];:,<>\.] { return yytext[0]; }
[ \n\t\r]+
[/][*]([^*]+|[*]+[^*/])*?[*]+[/]
[/][/].*

%%

int yywrap(yyscan_t yyscanner)
{
    return 1;
}
